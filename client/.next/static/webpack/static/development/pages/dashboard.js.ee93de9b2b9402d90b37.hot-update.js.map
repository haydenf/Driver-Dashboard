{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.ee93de9b2b9402d90b37.hot-update.js","sources":["webpack:///./src/Components/AntdTable/AntdTableComponent.js"],"sourcesContent":["import React from 'react';\n\nimport { Table, Button, Tag } from 'antd';\n\nimport { Segment } from 'semantic-ui-react';\n\nconst data = [\n  {\n    key: '1',\n    time: '2019-01-17T08:00:00Z',\n    distance: 20,\n    tags: ['vacation'],\n    startlocation: 'Sydney',\n    endlocation: 'Melbourne',\n  },\n  {\n    key: '2',\n    time: '2019-04-17T09:52:00Z',\n    distance: 22,\n    tags: [],\n    startlocation: 'Melbourne',\n    endlocation: 'Sydney',\n  },\n  {\n    key: '3',\n    time: '2019-05-17T12:32:00Z',\n    distance: 23,\n    tags: ['busuiness'],\n    startlocation: 'Brisbane',\n    endlocation: 'Gold Coast',\n  },\n  {\n    key: '4',\n    time: '2019-07-17T11:00:00Z',\n    distance: 40,\n    tags: [],\n    startlocation: 'Gold Coast',\n    endlocation: 'Brisbane',\n  },\n\n  {\n    key: '5',\n    time: '2019-07-21T11:33:00Z',\n    distance: 33,\n    tags: ['busuiness'],\n    startlocation: 'lennox head',\n    endlocation: 'Margaret River',\n  },\n  {\n    key: '6',\n    time: '2019-08-01T19:41:00Z',\n    distance: 21,\n    tags: ['commute'],\n    startlocation: 'Perth',\n    endlocation: 'Adelaide',\n  },\n  {\n    key: '7',\n    time: '2019-08-15T15:21:00Z',\n    distance: 19,\n    tags: ['commute'],\n    startlocation: 'Adelaide',\n    endlocation: 'Brisbane',\n  },\n];\n\n// const columns = [\n//   {\n//     title: \"Time\",\n//     dataIndex: \"time\"\n//   },\n\n//   {\n//     title: \"Distance\",\n//     dataIndex: \"ditance\"\n//   },\n\n//   {\n//     title: \"Tags\",\n//     dataIndex: \"tags\"\n//   },\n\n//   {\n//     title: \"Start Loocation\",\n//     dataIndex: \"startlocation\"\n//   },\n//   {\n//     title: \"End Location\",\n//     dataIndex: \"endlocation\"\n//   }\n// ];\n\nclass AntdTableComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredInfo: null,\n      sortedInfo: null,\n    };\n  }\n\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  };\n  clearFilters = () => {\n    this.setState({ filteredInfo: null });\n  };\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  };\n  setTimeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'time',\n      },\n    });\n  };\n  setDistanceSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'time',\n      },\n    });\n  };\n\n  render() {\n    const trips = this.props.tripData;\n    {\n      console.log(trips);\n    }\n    let { sortedInfo, filteredInfo } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [\n      {\n        title: 'Time',\n        dataIndex: 'startTime',\n        key: 'startTime',\n        sorter: (a, b) => (a.date < b.date ? -1 : a.date > b.date ? 1 : 0),\n        sortOrder: sortedInfo.columnKey === 'time' && sortedInfo.order,\n      },\n\n      {\n        title: 'Distance',\n        dataIndex: 'distance',\n        key: 'distance',\n        sorter: (a, b) => a.distance - b.distance,\n        sortOrder: sortedInfo.columnKey === 'distance' && sortedInfo.order,\n      },\n\n      {\n        title: 'Tags',\n        dataIndex: 'tags',\n        render: tags => (\n          <span>\n            {tags.map(tag => {\n              let color = 'green';\n              if (tag === 'vacation') {\n                color = 'red';\n              } else if (tag === 'busuiness') {\n                color = 'blue';\n              }\n              return (\n                <Tag color={color} key={tag}>\n                  {tag.toUpperCase()}\n                </Tag>\n              );\n            })}\n          </span>\n        ),\n        key: 'tagType',\n        filters: [\n          { text: 'busuiness', value: 'busuiness' },\n          { text: 'vacation', value: 'vacation' },\n        ],\n        filteredValue: filteredInfo.tags || null,\n        onFilter: (value, record) => record.tags.includes(value),\n      },\n\n      {\n        title: 'Start Location',\n        dataIndex: 'startLocation',\n        key: 'startlocation',\n        filters: [\n          { text: 'Sydney', value: 'Sydney' },\n          { text: 'Brisbane', value: 'Brisbane' },\n        ],\n        filteredValue: filteredInfo.startlocation || null,\n        onFilter: (value, record) => record.startlocation.includes(value),\n      },\n\n      {\n        title: 'End Location',\n        dataIndex: 'endlocation',\n        key: 'endlocation',\n        filters: [\n          { text: 'Sydney', value: 'Sydney' },\n          { text: 'Brisbane', value: 'Brisbane' },\n        ],\n        filteredValue: filteredInfo.endlocation || null,\n        onFilter: (value, record) => record.endlocation.includes(value),\n      },\n    ];\n    return (\n      <Segment>\n        <div>\n          <div className=\"table-operations\">\n            <Button onClick={this.setTimeSort}>Sort time</Button>\n            <Button onClick={this.setDistanceSort}>Sort Distance</Button>\n            <Button onClick={this.clearFilters}>Clear filters</Button>\n            <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n          </div>\n          <Table\n            columns={columns}\n            dataSource={trips}\n            onChange={this.handleChange}\n          />\n        </div>\n      </Segment>\n    );\n  }\n}\n\nexport default AntdTableComponent;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AASA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAfA;AAgBA;AAAA;AAAA;AACA;AACA;AAlBA;AAmBA;AACA;AACA;AAFA;AAIA;AACA;AAxBA;AAyBA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAhCA;AAiCA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAtCA;AACA;AACA;AAFA;AAIA;AACA;AAkCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AA1BA;AA8BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA1IA;AACA;AA2IA;;;;A","sourceRoot":""}