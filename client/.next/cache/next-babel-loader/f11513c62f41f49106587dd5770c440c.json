{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Table, Button, Tag } from 'antd';\nimport { Segment } from 'semantic-ui-react';\nconst data = [{\n  key: '1',\n  time: '2019-01-17T08:00:00Z',\n  distance: 20,\n  tags: ['vacation'],\n  startlocation: 'Sydney',\n  endlocation: 'Melbourne'\n}, {\n  key: '2',\n  time: '2019-04-17T09:52:00Z',\n  distance: 22,\n  tags: [],\n  startlocation: 'Melbourne',\n  endlocation: 'Sydney'\n}, {\n  key: '3',\n  time: '2019-05-17T12:32:00Z',\n  distance: 23,\n  tags: ['busuiness'],\n  startlocation: 'Brisbane',\n  endlocation: 'Gold Coast'\n}, {\n  key: '4',\n  time: '2019-07-17T11:00:00Z',\n  distance: 40,\n  tags: [],\n  startlocation: 'Gold Coast',\n  endlocation: 'Brisbane'\n}, {\n  key: '5',\n  time: '2019-07-21T11:33:00Z',\n  distance: 33,\n  tags: ['busuiness'],\n  startlocation: 'lennox head',\n  endlocation: 'Margaret River'\n}, {\n  key: '6',\n  time: '2019-08-01T19:41:00Z',\n  distance: 21,\n  tags: ['commute'],\n  startlocation: 'Perth',\n  endlocation: 'Adelaide'\n}, {\n  key: '7',\n  time: '2019-08-15T15:21:00Z',\n  distance: 19,\n  tags: ['commute'],\n  startlocation: 'Adelaide',\n  endlocation: 'Brisbane'\n}]; // const columns = [\n//   {\n//     title: \"Time\",\n//     dataIndex: \"time\"\n//   },\n//   {\n//     title: \"Distance\",\n//     dataIndex: \"ditance\"\n//   },\n//   {\n//     title: \"Tags\",\n//     dataIndex: \"tags\"\n//   },\n//   {\n//     title: \"Start Loocation\",\n//     dataIndex: \"startlocation\"\n//   },\n//   {\n//     title: \"End Location\",\n//     dataIndex: \"endlocation\"\n//   }\n// ];\n\nclass AntdTableComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", (pagination, filters, sorter) => {\n      console.log('Various parameters', pagination, filters, sorter);\n      this.setState({\n        filteredInfo: filters,\n        sortedInfo: sorter\n      });\n    });\n\n    _defineProperty(this, \"clearFilters\", () => {\n      this.setState({\n        filteredInfo: null\n      });\n    });\n\n    _defineProperty(this, \"clearAll\", () => {\n      this.setState({\n        filteredInfo: null,\n        sortedInfo: null\n      });\n    });\n\n    _defineProperty(this, \"setTimeSort\", () => {\n      this.setState({\n        sortedInfo: {\n          order: 'descend',\n          columnKey: 'time'\n        }\n      });\n    });\n\n    _defineProperty(this, \"setDistanceSort\", () => {\n      this.setState({\n        sortedInfo: {\n          order: 'descend',\n          columnKey: 'time'\n        }\n      });\n    });\n\n    this.state = {\n      filteredInfo: null,\n      sortedInfo: null\n    };\n  }\n\n  render() {\n    {}\n    let {\n      sortedInfo,\n      filteredInfo\n    } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [{\n      title: 'Time',\n      dataIndex: 'time',\n      key: 'time',\n      sorter: (a, b) => a.date < b.date ? -1 : a.date > b.date ? 1 : 0,\n      sortOrder: sortedInfo.columnKey === 'time' && sortedInfo.order\n    }, {\n      title: 'Distance',\n      dataIndex: 'distance',\n      key: 'distance',\n      sorter: (a, b) => a.distance - b.distance,\n      sortOrder: sortedInfo.columnKey === 'distance' && sortedInfo.order\n    }, {\n      title: 'Tags',\n      dataIndex: 'tags',\n      render: tags => __jsx(\"span\", null, tags.map(tag => {\n        let color = 'green';\n\n        if (tag === 'vacation') {\n          color = 'red';\n        } else if (tag === 'busuiness') {\n          color = 'blue';\n        }\n\n        return __jsx(Tag, {\n          color: color,\n          key: tag\n        }, tag.toUpperCase());\n      })),\n      key: 'tags',\n      filters: [{\n        text: 'busuiness',\n        value: 'busuiness'\n      }, {\n        text: 'vacation',\n        value: 'vacation'\n      }],\n      filteredValue: filteredInfo.tags || null,\n      onFilter: (value, record) => record.tags.includes(value)\n    }, {\n      title: 'Start Location',\n      dataIndex: 'startlocation',\n      key: 'startlocation',\n      filters: [{\n        text: 'Sydney',\n        value: 'Sydney'\n      }, {\n        text: 'Brisbane',\n        value: 'Brisbane'\n      }],\n      filteredValue: filteredInfo.startlocation || null,\n      onFilter: (value, record) => record.startlocation.includes(value)\n    }, {\n      title: 'End Location',\n      dataIndex: 'endlocation',\n      key: 'endlocation',\n      filters: [{\n        text: 'Sydney',\n        value: 'Sydney'\n      }, {\n        text: 'Brisbane',\n        value: 'Brisbane'\n      }],\n      filteredValue: filteredInfo.endlocation || null,\n      onFilter: (value, record) => record.endlocation.includes(value)\n    }];\n    return __jsx(Segment, null, __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"table-operations\"\n    }, __jsx(Button, {\n      onClick: this.setTimeSort\n    }, \"Sort time\"), __jsx(Button, {\n      onClick: this.setDistanceSort\n    }, \"Sort Distance\"), __jsx(Button, {\n      onClick: this.clearFilters\n    }, \"Clear filters\"), __jsx(Button, {\n      onClick: this.clearAll\n    }, \"Clear filters and sorters\")), __jsx(Table, {\n      columns: columns,\n      dataSource: data,\n      onChange: this.handleChange\n    })));\n  }\n\n}\n\nexport default AntdTableComponent;","map":null,"metadata":{},"sourceType":"module"}