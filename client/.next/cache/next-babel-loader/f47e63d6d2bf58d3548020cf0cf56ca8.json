{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport fetch from 'node-fetch';\nimport Cookiez from 'next-cookies';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { Redirect } from 'react-router-dom';\nimport LoginView from '../src/pages/Login/LoginView';\nimport { useRouter } from 'next/router';\n\nfunction handleSuccessfulLogin(router) {\n  return function (loginResult) {\n    document.cookie = `GofarDashboardUserId=${loginResult.userId};`;\n    document.cookie = `GofarDashboardToken=${loginResult.authToken};`;\n    router.push('/dashboard');\n  };\n}\n\nexport default function LoginPage(props) {\n  if (props.authToken) {\n    return __jsx(Redirect, {\n      to: \"/dashboard\"\n    });\n  }\n\n  const router = useRouter();\n  const client = new ApolloClient({\n    uri: 'https://jt63wdhqqre6rpjo5lnylfhjqm.appsync-api.ap-southeast-2.amazonaws.com/graphql',\n    headers: {\n      Authorization: props.authToken,\n      'X-API-KEY': 'da2-d5trhzrnqraznclr2teue2bmmu'\n    },\n    fetch\n  });\n  return __jsx(ApolloProvider, {\n    client: client\n  }, __jsx(LoginView, _extends({}, props, {\n    handleSuccessfulLogin: handleSuccessfulLogin(router)\n  })));\n}\n\nLoginPage.getInitialProps = ctx => {\n  console.log(`THIS IS COMING FROM INDEX`, ctx);\n  return {\n    cookiez: Cookiez(ctx) || ''\n  };\n};","map":null,"metadata":{},"sourceType":"module"}