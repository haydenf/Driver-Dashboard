{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport LoginForm from '../../Components/Login/LoginForm';\nimport LoginHeroImage from '../../Images/loginHeroImage.jpg';\nimport LoadingSpinner from '../../Components/LoadingSpinner';\nimport { LOGIN_QUERY } from '../../queries/queries';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { Route } from 'react-router-dom'; // import 'semantic-ui-css/semantic.min.css';\n// import '../src/styles/App.css';\n\nvar renderBody = function renderBody(executeLogin) {\n  return __jsx(LoginForm, {\n    handleLogin: function handleLogin(email, password) {\n      executeLogin({\n        variables: {\n          email: email,\n          password: password\n        }\n      });\n    }\n  });\n};\n\nvar LoginView = function LoginView(props) {\n  var _useLazyQuery = useLazyQuery(LOGIN_QUERY),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      executeLogin = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      loading = _useLazyQuery2$.loading,\n      data = _useLazyQuery2$.data;\n\n  var enteredInvalidPassword = data && data.login && !data.login.successful;\n\n  if (!loading && data && data.login && data.login.successful) {\n    props.handleSuccessfulLogin({\n      authToken: data.login.authToken,\n      userId: data.login.userId\n    });\n\n    __jsx(Route, {\n      path: \"/dashboard\"\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    className: \"bg-image\",\n    style: {\n      backgroundImage: \"url(\".concat(LoginHeroImage, \")\")\n    }\n  }, enteredInvalidPassword && __jsx(\"p\", null, \"Invalid Password\"), loading && __jsx(LoadingSpinner, null), renderBody(executeLogin)));\n};\n\nexport default LoginView;","map":null,"metadata":{},"sourceType":"module"}